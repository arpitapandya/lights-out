{"version":3,"sources":["Cell.js","Board.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["Cell","flipCellsAroundMe","isLit","classes","className","onClick","role","Board","nrows","ncols","chanceLightStartsOn","useState","initialBoard","y","row","x","push","Math","random","createBoard","board","setBoard","flipCellsAround","coord","oldBoard","split","map","Number","flipCell","boardCopy","every","cell","tblBoard","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"sQAqBeA,MALf,YAAmD,IAAnCC,EAAkC,EAAlCA,kBAAkC,IAAfC,MAC3BC,EAAO,oBADmC,SAChB,WAAa,IAC7C,OAAO,oBAAIC,UAAWD,EAASE,QAASJ,EAAmBK,KAAK,Y,MCiGnDC,MAtFf,YAAsE,IAAD,IAApDC,aAAoD,MAA5C,EAA4C,MAAzCC,aAAyC,MAAjC,EAAiC,MAA9BC,2BAA8B,MAAR,IAAQ,IACzCC,mBAG1B,WAGE,IAFA,IAAIC,EAAe,GAEVC,EAAI,EAAGA,EAAIL,EAAOK,IAAK,CAE5B,IADA,IAAIC,EAAM,GACDC,EAAI,EAAGA,EAAIN,EAAOM,IACzBD,EAAIE,KAAKC,KAAKC,SAAWR,GAE3BE,EAAaI,KAAKF,GAEtB,OAAOF,EAb0BO,IADgC,mBAC5DC,EAD4D,KACrDC,EADqD,KAsBnE,SAASC,EAAgBC,GACvBF,GAAS,SAAAG,GAAa,IAAD,EACJD,EAAME,MAAM,KAAKC,IAAIC,QADjB,mBACZd,EADY,KACTE,EADS,KAGba,EAAW,SAACf,EAAGE,EAAGc,GAGlBd,GAAK,GAAKA,EAAIN,GAASI,GAAK,GAAKA,EAAIL,IACvCqB,EAAUhB,GAAGE,IAAMc,EAAUhB,GAAGE,KAK9Bc,EAAYL,EAASE,KAAI,SAAAZ,GAAG,mBAAQA,MAS1C,OANAc,EAASf,EAAGE,EAAGc,GACfD,EAASf,EAAGE,EAAI,EAAGc,GACnBD,EAASf,EAAGE,EAAI,EAAGc,GACnBD,EAASf,EAAI,EAAGE,EAAGc,GACnBD,EAASf,EAAI,EAAGE,EAAGc,GAEZA,KAKX,GA9BaT,EAAMU,OAAM,SAAAhB,GAAG,OAAIA,EAAIgB,OAAM,SAAAC,GAAI,OAAKA,QA+BjD,OAAO,2CAOT,IAFA,IAAIC,EAAW,GAENnB,EAAI,EAAGA,EAAIL,EAAOK,IAAK,CAE9B,IADA,IAAIC,EAAM,GADoB,WAErBC,GACP,IAAIQ,EAAK,UAAMV,EAAN,YAAWE,GACpBD,EAAIE,KACF,cAAC,EAAD,CAEEd,MAAOkB,EAAMP,GAAGE,GAChBd,kBAAmB,kBAAMqB,EAAgBC,KAFpCA,KAJFR,EAAI,EAAGA,EAAIN,EAAOM,IAAM,EAAxBA,GAUTiB,EAAShB,KAAK,6BAAaF,GAAJD,IAEzB,OACI,sBAAKT,UAAU,cAAf,UACI,6CACF,qBAAKA,UAAU,mBAAf,SACI,yDAA2B,uBAA3B,mGAGJ,uBAAOA,UAAU,QAAjB,SACF,gCAAQ4B,UC5GC,I,MCaAC,MARf,WACE,OACE,qBAAK7B,UAAU,MAAf,SACE,cAAC,EAAD,OCIS8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAAO,cAAC,EAAD,IACdC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e66b5221.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Cell.css\";\r\n\r\n/** A single cell on the board.\r\n *\r\n * This has no state --- just two props:\r\n *\r\n * - flipCellsAroundMe: a function rec'd from the board which flips this\r\n *      cell and the cells around of it\r\n *\r\n * - isLit: boolean, is this cell lit?\r\n *\r\n * This handles clicks --- by calling flipCellsAroundMe\r\n *\r\n **/\r\n\r\nfunction Cell({ flipCellsAroundMe, isLit=false }) {\r\n  const classes = `Cell ${isLit ? \"Cell-lit\" : \"\"}`;\r\n  return <td className={classes} onClick={flipCellsAroundMe} role=\"button\" />;\r\n}\r\n\r\nexport default Cell;","import React, { useState } from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport \"./Board.css\";\r\n\r\n/** Game board of Lights out.\r\n *\r\n * Properties:\r\n *\r\n * - nrows: number of rows of board\r\n * - ncols: number of cols of board\r\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\r\n *\r\n * State:\r\n *\r\n * - board: array-of-arrays of true/false\r\n *\r\n *    For this board:\r\n *       .  .  .\r\n *       O  O  .     (where . is off, and O is on)\r\n *       .  .  .\r\n *\r\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\r\n *\r\n *  This should render an HTML table of individual <Cell /> components.\r\n *\r\n *  This doesn't handle any clicks --- clicks are on individual cells\r\n *\r\n **/\r\n\r\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn = 0.25 }) {\r\n  const [board, setBoard] = useState(createBoard());\r\n\r\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\r\n  function createBoard() {\r\n    let initialBoard = [];\r\n    // TODO: create array-of-arrays of true/false values\r\n    for (let y = 0; y < nrows; y++) {\r\n        let row = [];\r\n        for (let x = 0; x < ncols; x++) {\r\n          row.push(Math.random() < chanceLightStartsOn);\r\n        }\r\n        initialBoard.push(row);\r\n      }\r\n    return initialBoard;\r\n  }\r\n\r\n    function hasWon() {\r\n    // TODO: check the board in state to determine whether the player has won.\r\n        return board.every(row => row.every(cell => !cell));\r\n    }\r\n\r\n  function flipCellsAround(coord) {\r\n    setBoard(oldBoard => {\r\n      const [y, x] = coord.split(\"-\").map(Number);\r\n\r\n      const flipCell = (y, x, boardCopy) => {\r\n        // if this coord is actually on board, flip it\r\n\r\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\r\n          boardCopy[y][x] = !boardCopy[y][x];\r\n        }\r\n      };\r\n\r\n      // TODO: Make a (deep) copy of the oldBoard\r\n      const boardCopy = oldBoard.map(row => [...row]);\r\n\r\n      // TODO: in the copy, flip this cell and the cells around it\r\n      flipCell(y, x, boardCopy);\r\n      flipCell(y, x - 1, boardCopy);\r\n      flipCell(y, x + 1, boardCopy);\r\n      flipCell(y - 1, x, boardCopy);\r\n      flipCell(y + 1, x, boardCopy);\r\n      // TODO: return the copy\r\n      return boardCopy;\r\n    });\r\n  }\r\n\r\n  // if the game is won, just show a winning msg & render nothing else\r\n  if (hasWon()) {\r\n    return <div>You Win!</div>;\r\n  }\r\n  // TODO\r\n\r\n  // make table board\r\n  let tblBoard = [];\r\n\r\n  for (let y = 0; y < nrows; y++) {\r\n    let row = [];\r\n    for (let x = 0; x < ncols; x++) {\r\n      let coord = `${y}-${x}`;\r\n      row.push(\r\n        <Cell\r\n          key={coord}\r\n          isLit={board[y][x]}\r\n          flipCellsAroundMe={() => flipCellsAround(coord)}\r\n        />\r\n      );\r\n    }\r\n    tblBoard.push(<tr key={y}>{row}</tr>);\r\n  }\r\n  return (\r\n      <div className=\"Board-Title\">\r\n          <h1>Lights-Out!</h1>\r\n        <div className=\"Board-Directions\">\r\n            <p>Turn off all the lights!<br/>\r\n            Clicking the button below will allow you to toggle the lights below, above, left and right.</p>\r\n        </div>\r\n        <table className=\"Board\">\r\n      <tbody>{tblBoard}</tbody>\r\n    </table>\r\n    </div>\r\n  );\r\n}\r\n  // TODO\r\n\r\nexport default Board;\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\nimport Board from \"./Board\";\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}